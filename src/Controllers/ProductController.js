const SalesModel = require("../Models/ProductModel");


// Calculate and return the total revenue generated by all sales transactions

exports.totalRevenue = async (req, res) => {
    try {
        const result = await SalesModel.aggregate([
            {
                $group: {
                    _id: null,
                    totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } },
                },
            },
        ]);
        res.json(result[0]);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};


// Find and return the total quantity sold for each product
exports.quantityByProduct = async (req, res) => {
    try {
        const result = await SalesModel.aggregate([
            {
                $group: {
                    _id: '$product',
                    totalQuantity: { $sum: '$quantity' },
                },
            },
        ]);
        res.json(result);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};



// Retrieve the top 5 products with the highest total revenue
exports.topProducts = async (req, res) => {
    try {
        const result = await SalesModel.aggregate([
            {
                $group: {
                    _id: '$product',
                    totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } },
                },
            },
            { $sort: { totalRevenue: -1 } },
            { $limit: 5 },
        ]);
        res.json(result);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};


// Calculate and return the average price of products sold
exports.averagePrice = async (req, res) => {
    try {
        const result = await SalesModel.aggregate([
            {
                $group: {
                    _id: null,
                    averagePrice: { $avg: '$price' },
                },
            },
        ]);
        res.json(result[0]);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};


// Group the sales data by month and year and calculate the total revenue for each month-year combination
exports.revenueByMonth = async (req, res) => {
    try {
        const result = await SalesModel.aggregate([
            {
                $group: {
                    _id: {
                        year: { $year: '$date' },
                        month: { $month: '$date' },
                    },
                    totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } },
                },
            },
        ]);
        res.json(result);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

// Find and return the product that had the highest quantity sold on a single day
exports.highestQuantitySold = async (req, res) => {
    try {
        const result = await SalesModel.aggregate([
            {
                $group: {
                    _id: '$product',
                    maxQuantity: { $max: '$quantity' },
                },
            },
            { $sort: { maxQuantity: -1 } },
            { $limit: 1 },
        ]);
        res.json(result[0]);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};


/* // Calculate and return the total salary expense for each department
exports.departmentSalaryExpense=async (req, res) => {
    // Add your aggregation pipeline for this endpoint
    try {
        // Your aggregation pipeline logic here
        const result = await SalesModel.aggregate([
            // Your aggregation stages here
        ]);
        res.json(result);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};
 */